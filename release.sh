#!/bin/bash

# Script pour cr√©er et publier des versions (tags) Git
# Suit la convention Semantic Versioning (SemVer): MAJOR.MINOR.PATCH

echo "üè∑Ô∏è  Script de gestion des versions Git"
echo "====================================="

# Fonction pour afficher l'aide
show_help() {
    echo ""
    echo "üìñ Guide des versions Semantic Versioning:"
    echo ""
    echo "Format: MAJOR.MINOR.PATCH (ex: 1.2.3)"
    echo ""
    echo "üî¥ MAJOR (1.x.x) - Changements incompatibles:"
    echo "   ‚Ä¢ Modifications de l'API breaking"
    echo "   ‚Ä¢ Changements d'architecture majeurs" 
    echo "   ‚Ä¢ Suppressions de fonctionnalit√©s"
    echo ""
    echo "üü° MINOR (x.1.x) - Nouvelles fonctionnalit√©s:"
    echo "   ‚Ä¢ Ajout de nouvelles features"
    echo "   ‚Ä¢ Am√©liorations compatibles"
    echo "   ‚Ä¢ Nouvelles APIs r√©tro-compatibles"
    echo ""
    echo "üü¢ PATCH (x.x.1) - Corrections:"
    echo "   ‚Ä¢ Bug fixes"
    echo "   ‚Ä¢ Corrections de s√©curit√©"
    echo "   ‚Ä¢ Optimisations mineures"
    echo ""
    echo "üéØ Exemples d'usage:"
    echo "   ./release.sh patch    # 1.1.0 ‚Üí 1.1.1"
    echo "   ./release.sh minor    # 1.1.1 ‚Üí 1.2.0" 
    echo "   ./release.sh major    # 1.2.0 ‚Üí 2.0.0"
    echo "   ./release.sh 1.5.2    # Version sp√©cifique"
    echo ""
}

# Fonction pour obtenir le dernier tag
get_latest_tag() {
    git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0"
}

# Fonction pour incr√©menter une version
increment_version() {
    local version=$1
    local type=$2
    
    # Supprimer le 'v' si pr√©sent
    version=${version#v}
    
    IFS='.' read -r major minor patch <<< "$version"
    
    case $type in
        "major")
            major=$((major + 1))
            minor=0
            patch=0
            ;;
        "minor")
            minor=$((minor + 1))
            patch=0
            ;;
        "patch")
            patch=$((patch + 1))
            ;;
        *)
            echo "‚ùå Type de version invalide: $type"
            return 1
            ;;
    esac
    
    echo "v${major}.${minor}.${patch}"
}

# Fonction pour valider une version
validate_version() {
    local version=$1
    # Regex pour valider le format semver
    if [[ $version =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# V√©rifier que nous sommes dans un repository Git
if [ ! -d ".git" ]; then
    echo "‚ùå Erreur: Pas un repository Git!"
    exit 1
fi

# V√©rifier qu'il n'y a pas de modifications non commit√©es
if [ -n "$(git status --porcelain)" ]; then
    echo "‚ö†Ô∏è  Modifications non commit√©es d√©tect√©es!"
    echo ""
    git status --short
    echo ""
    read -p "ü§î Voulez-vous commiter automatiquement ? (y/N): " auto_commit
    if [[ $auto_commit =~ ^[Yy]$ ]]; then
        echo "üìù Cr√©ation d'un commit automatique..."
        git add .
        git commit -m "üîß chore: Prepare release

üì¶ Auto-commit before version tagging
üïê $(date '+%Y-%m-%d %H:%M:%S')"
        echo "‚úÖ Commit cr√©√©"
    else
        echo "‚ùå Veuillez commiter vos modifications avant de cr√©er une version."
        echo "üí° Utilisez: git add . && git commit -m 'votre message'"
        exit 1
    fi
fi

# Obtenir la version actuelle
current_tag=$(get_latest_tag)
echo "üìã Version actuelle: $current_tag"

# Gestion des arguments
if [ $# -eq 0 ]; then
    show_help
    echo "üéØ Version actuelle: $current_tag"
    echo ""
    read -p "üí≠ Quel type de version cr√©er ? (major/minor/patch): " version_type
else
    version_type=$1
fi

# D√©terminer la nouvelle version
case $version_type in
    "major"|"minor"|"patch")
        new_version=$(increment_version "$current_tag" "$version_type")
        if [ $? -ne 0 ]; then
            exit 1
        fi
        ;;
    "help"|"-h"|"--help")
        show_help
        exit 0
        ;;
    *)
        # V√©rifier si c'est une version sp√©cifique
        test_version=$version_type
        # Ajouter 'v' si pas pr√©sent
        if [[ ! $test_version =~ ^v ]]; then
            test_version="v$test_version"
        fi
        
        if validate_version "$test_version"; then
            new_version=$test_version
        else
            echo "‚ùå Format de version invalide: $version_type"
            echo "üìñ Format attendu: MAJOR.MINOR.PATCH (ex: 1.2.3)"
            echo "üí° Ou utilisez: major, minor, patch"
            exit 1
        fi
        ;;
esac

echo ""
echo "üîÑ Transition de version:"
echo "   üìç Actuelle: $current_tag"
echo "   üéØ Nouvelle: $new_version"
echo ""

# Demander confirmation
read -p "ü§î Confirmer la cr√©ation de cette version ? (y/N): " confirm
if [[ ! $confirm =~ ^[Yy]$ ]]; then
    echo "‚ùå Op√©ration annul√©e."
    exit 0
fi

# Demander le message de release
echo ""
echo "üìù Message de release (laissez vide pour un message automatique):"
read -p "üí¨ D√©crivez les changements: " release_message

if [ -z "$release_message" ]; then
    # Message automatique bas√© sur le type
    case $version_type in
        "major")
            release_message="üöÄ Major Release $new_version

üî¥ Breaking Changes:
- Modifications importantes de l'architecture
- V√©rifiez la documentation de migration

‚ö†Ô∏è  Cette version contient des changements incompatibles"
            ;;
        "minor")
            release_message="‚ú® Feature Release $new_version

üü° New Features:
- Nouvelles fonctionnalit√©s ajout√©es
- Am√©liorations de l'interface
- Extensions des capacit√©s existantes

‚úÖ R√©tro-compatible avec la version pr√©c√©dente"
            ;;
        "patch")
            release_message="üõ†Ô∏è  Patch Release $new_version

üü¢ Bug Fixes:
- Corrections de bugs
- Am√©liorations de stabilit√©
- Optimisations de performance

üîß Mise √† jour recommand√©e pour tous les utilisateurs"
            ;;
        *)
            release_message="üì¶ Release $new_version

üîÑ Version sp√©cifique
üïê $(date '+%Y-%m-%d %H:%M:%S')"
            ;;
    esac
fi

echo ""
echo "üè∑Ô∏è  Cr√©ation du tag..."

# Cr√©er le tag annot√©
if git tag -a "$new_version" -m "$release_message"; then
    echo "‚úÖ Tag $new_version cr√©√© avec succ√®s"
    
    # Pousser vers GitHub
    echo ""
    echo "üì§ Push vers GitHub..."
    if git push origin main --tags; then
        echo ""
        echo "üéâ ‚úÖ VERSION $new_version PUBLI√âE AVEC SUCC√àS!"
        echo ""
        echo "üåê Liens utiles:"
        echo "   üì¶ Repository: https://github.com/boujrafh/strapi-blog"
        echo "   üè∑Ô∏è  Releases: https://github.com/boujrafh/strapi-blog/releases"
        echo "   üìã Tags: https://github.com/boujrafh/strapi-blog/tags"
        echo ""
        echo "üìö Prochaines √©tapes:"
        echo "   1. üìù Cr√©ez une release note sur GitHub"
        echo "   2. üì¢ Annoncez les changements √† votre √©quipe"
        echo "   3. üîÑ Mettez √† jour la documentation si n√©cessaire"
        echo ""
        echo "üí° Astuce: Visitez GitHub pour cr√©er une release note d√©taill√©e!"
    else
        echo "‚ùå Erreur lors du push vers GitHub"
        echo "üîß Le tag existe localement, vous pouvez retry avec:"
        echo "   git push origin main --tags"
        exit 1
    fi
else
    echo "‚ùå Erreur lors de la cr√©ation du tag"
    exit 1
fi
