#!/bin/bash

# üîß Script de diagnostic avanc√© pour les probl√®mes Strapi/React
echo "üîß Diagnostic avanc√© Strapi/React"
echo "================================"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour v√©rifier les erreurs React courantes
check_react_errors() {
    echo ""
    echo "üîç Analyse des erreurs React/Context..."
    echo "======================================"
    
    local strapi_logs="/home/myblog/backend/logs/strapi.log"
    local browser_errors=()
    
    # V√©rifier les erreurs de contexte React
    echo ""
    log_info "üîç Recherche d'erreurs de contexte React..."
    
    # Erreurs courantes √† d√©tecter
    local error_patterns=(
        "Cannot read properties of null.*useContext"
        "useContext.*null"
        "Router.*useContext"
        "TypeError.*useContext"
        "Uncaught TypeError"
        "Cannot read properties of undefined"
        "Maximum call stack size exceeded"
        "Memory leak"
        "FATAL ERROR"
        "out of memory"
    )
    
    # Analyser les logs du navigateur via curl des pages admin
    log_info "Test de l'interface admin Strapi..."
    
    local admin_response=$(curl -s -w "%{http_code}" --max-time 15 "http://localhost:1440/admin" 2>/dev/null)
    local http_code="${admin_response: -3}"
    local response_body="${admin_response%???}"
    
    echo "   üìä Code r√©ponse: $http_code"
    
    if [ "$http_code" != "200" ] && [ "$http_code" != "302" ]; then
        log_error "Interface admin non accessible (Code: $http_code)"
        return 1
    fi
    
    # V√©rifier la structure de la r√©ponse
    if echo "$response_body" | grep -q "useContext"; then
        log_warning "R√©f√©rences useContext d√©tect√©es dans la r√©ponse"
    fi
    
    # V√©rifier les erreurs JavaScript dans les logs Strapi
    if [ -f "$strapi_logs" ]; then
        log_info "Analyse des logs Strapi..."
        
        for pattern in "${error_patterns[@]}"; do
            local count=$(grep -c "$pattern" "$strapi_logs" 2>/dev/null || echo "0")
            if [ "$count" -gt 0 ]; then
                log_warning "Pattern '$pattern': $count occurrences"
                
                # Afficher les 2 derni√®res occurrences
                echo "   Derni√®res occurrences:"
                grep "$pattern" "$strapi_logs" | tail -2 | while read line; do
                    echo "     $line"
                done
            fi
        done
    else
        log_warning "Logs Strapi non trouv√©s ($strapi_logs)"
    fi
}

# Fonction pour v√©rifier l'√©tat de la m√©moire
check_memory_status() {
    echo ""
    echo "üß† Analyse de l'utilisation m√©moire..."
    echo "===================================="
    
    local strapi_pid=$(pgrep -f "strapi.*develop")
    
    if [ -z "$strapi_pid" ]; then
        log_error "Processus Strapi non trouv√©"
        return 1
    fi
    
    # Statistiques m√©moire d√©taill√©es
    local memory_info=$(ps -p $strapi_pid -o pid,ppid,%mem,%cpu,rss,vsz,etime,cmd --no-headers)
    echo "üìä Processus Strapi (PID: $strapi_pid):"
    echo "$memory_info"
    
    # M√©moire RSS en MB
    local rss_kb=$(echo "$memory_info" | awk '{print $5}')
    local rss_mb=$((rss_kb / 1024))
    
    echo ""
    echo "üìä D√©tails m√©moire:"
    echo "   üîπ M√©moire physique (RSS): ${rss_mb} MB"
    echo "   üîπ M√©moire virtuelle (VSZ): $(echo "$memory_info" | awk '{print $6/1024}' | cut -d. -f1) MB"
    echo "   üîπ Pourcentage m√©moire: $(echo "$memory_info" | awk '{print $3}')%"
    echo "   üîπ Pourcentage CPU: $(echo "$memory_info" | awk '{print $4}')%"
    echo "   üîπ Temps d'ex√©cution: $(echo "$memory_info" | awk '{print $7}')"
    
    # Alerte si m√©moire √©lev√©e
    if [ "$rss_mb" -gt 1000 ]; then
        log_warning "Utilisation m√©moire √©lev√©e: ${rss_mb} MB"
        log_info "Recommandation: Red√©marrage pr√©ventif recommand√©"
    elif [ "$rss_mb" -gt 500 ]; then
        log_warning "Utilisation m√©moire mod√©r√©e: ${rss_mb} MB"
    else
        log_success "Utilisation m√©moire normale: ${rss_mb} MB"
    fi
    
    # V√©rifier les fuites m√©moire potentielles
    echo ""
    echo "üîç Recherche de fuites m√©moire..."
    
    # Analyser l'historique d'utilisation si disponible
    if [ -f "/home/myblog/logs/strapi-monitor.log" ]; then
        local memory_trend=$(grep "M√©moire:" /home/myblog/logs/strapi-monitor.log | tail -5)
        if [ -n "$memory_trend" ]; then
            echo "üìà Tendance m√©moire (5 derni√®res mesures):"
            echo "$memory_trend"
        fi
    fi
}

# Fonction pour v√©rifier les d√©pendances Node.js
check_node_dependencies() {
    echo ""
    echo "üì¶ V√©rification des d√©pendances Node.js..."
    echo "========================================="
    
    cd /home/myblog/backend
    
    # V√©rifier la version Node.js
    local node_version=$(node --version)
    local npm_version=$(npm --version)
    
    echo "üìä Versions install√©es:"
    echo "   üîπ Node.js: $node_version"
    echo "   üîπ NPM: $npm_version"
    
    # V√©rifier les versions recommand√©es pour Strapi v5
    local node_major=$(echo $node_version | cut -d'.' -f1 | tr -d 'v')
    
    if [ "$node_major" -lt 18 ]; then
        log_error "Version Node.js trop ancienne. Strapi v5 requiert Node.js 18+"
    elif [ "$node_major" -ge 18 ] && [ "$node_major" -le 20 ]; then
        log_success "Version Node.js compatible avec Strapi v5"
    else
        log_warning "Version Node.js tr√®s r√©cente, v√©rifiez la compatibilit√©"
    fi
    
    # V√©rifier les vuln√©rabilit√©s
    echo ""
    log_info "üîç Audit de s√©curit√© NPM..."
    local audit_output=$(npm audit 2>/dev/null)
    local vulnerabilities=$(echo "$audit_output" | grep "vulnerabilities" | tail -1)
    
    if [ -n "$vulnerabilities" ]; then
        echo "   $vulnerabilities"
        if echo "$audit_output" | grep -q "high\|critical"; then
            log_warning "Vuln√©rabilit√©s critiques d√©tect√©es"
            echo "   üí° Ex√©cutez: npm audit fix"
        fi
    else
        log_success "Aucune vuln√©rabilit√© d√©tect√©e"
    fi
    
    # V√©rifier les d√©pendances obsol√®tes
    echo ""
    log_info "üîç V√©rification des packages obsol√®tes..."
    local outdated=$(npm outdated 2>/dev/null)
    if [ -n "$outdated" ]; then
        echo "$outdated"
        log_warning "Packages obsol√®tes d√©tect√©s"
    else
        log_success "Toutes les d√©pendances sont √† jour"
    fi
}

# Fonction pour v√©rifier la configuration Vite/Strapi
check_vite_config() {
    echo ""
    echo "‚ö° V√©rification configuration Vite..."
    echo "===================================="
    
    local vite_config="/home/myblog/backend/src/admin/vite.config.ts"
    
    if [ -f "$vite_config" ]; then
        log_success "Fichier vite.config.ts trouv√©"
        
        # V√©rifier la configuration allowedHosts
        if grep -q "allowedHosts" "$vite_config"; then
            log_success "Configuration allowedHosts pr√©sente"
            echo "   Configuration:"
            grep -A 5 -B 2 "allowedHosts" "$vite_config"
        else
            log_error "Configuration allowedHosts manquante"
            echo ""
            echo "üí° Solution: Ajouter allowedHosts dans vite.config.ts:"
            echo "   server: {"
            echo "     allowedHosts: ['cms.bh-systems.be', 'localhost']"
            echo "   }"
        fi
        
        # V√©rifier la configuration du serveur
        if grep -q "server:" "$vite_config"; then
            log_success "Configuration serveur pr√©sente"
        else
            log_warning "Configuration serveur manquante ou incompl√®te"
        fi
    else
        log_error "Fichier vite.config.ts non trouv√©"
        echo "   Emplacement attendu: $vite_config"
    fi
}

# Fonction pour tester la connectivit√© r√©seau
check_network_connectivity() {
    echo ""
    echo "üåê Test de connectivit√© r√©seau..."
    echo "==============================="
    
    # Test connectivit√© locale
    log_info "üîç Test connectivit√© locale..."
    
    if nc -z localhost 1440 2>/dev/null; then
        log_success "Port 1440 (Strapi) accessible"
    else
        log_error "Port 1440 (Strapi) non accessible"
    fi
    
    if nc -z localhost 5173 2>/dev/null; then
        log_success "Port 5173 (Frontend) accessible"
    else
        log_error "Port 5173 (Frontend) non accessible"
    fi
    
    # Test API Strapi
    echo ""
    log_info "üîç Test API Strapi..."
    
    local api_test=$(curl -s --max-time 10 "http://localhost:1440/api/posts" 2>/dev/null)
    if echo "$api_test" | jq . >/dev/null 2>&1; then
        log_success "API Strapi fonctionne (JSON valide)"
        local post_count=$(echo "$api_test" | jq '.data | length' 2>/dev/null || echo "0")
        echo "   üîπ Nombre de posts: $post_count"
    else
        log_error "API Strapi ne retourne pas de JSON valide"
        echo "   R√©ponse: $(echo "$api_test" | head -c 200)..."
    fi
    
    # Test des domaines de production si configur√©s
    echo ""
    log_info "üîç Test des domaines de production..."
    
    if ping -c 1 cms.bh-systems.be >/dev/null 2>&1; then
        log_success "Domaine cms.bh-systems.be r√©solvable"
        
        local prod_test=$(curl -s -w "%{http_code}" --max-time 10 "https://cms.bh-systems.be/admin" 2>/dev/null)
        local prod_code="${prod_test: -3}"
        
        if [ "$prod_code" = "200" ] || [ "$prod_code" = "302" ]; then
            log_success "CMS production accessible (Code: $prod_code)"
        else
            log_warning "CMS production probl√©matique (Code: $prod_code)"
        fi
    else
        log_warning "Domaine cms.bh-systems.be non r√©solvable"
    fi
}

# Fonction pour g√©n√©rer un rapport de diagnostic
generate_report() {
    echo ""
    echo "üìã G√©n√©ration du rapport de diagnostic..."
    echo "========================================"
    
    local report_file="/home/myblog/logs/diagnostic-$(date +%Y%m%d-%H%M%S).txt"
    
    {
        echo "üîß RAPPORT DE DIAGNOSTIC STRAPI/REACT"
        echo "====================================="
        echo "Date: $(date)"
        echo "Hostname: $(hostname)"
        echo ""
        
        echo "üìä √âTAT DES PROCESSUS:"
        echo "---------------------"
        ps aux | grep -E "(strapi|node|npm)" | grep -v grep
        echo ""
        
        echo "üìä PORTS OCCUP√âS:"
        echo "----------------"
        lsof -i:1440 2>/dev/null || echo "Port 1440: Libre"
        lsof -i:5173 2>/dev/null || echo "Port 5173: Libre"
        echo ""
        
        echo "üìä UTILISATION M√âMOIRE:"
        echo "----------------------"
        free -h
        echo ""
        
        echo "üìä ESPACE DISQUE:"
        echo "----------------"
        df -h /home/myblog
        echo ""
        
        echo "üìä LOGS R√âCENTS (derni√®res 10 lignes):"
        echo "-------------------------------------"
        if [ -f "/home/myblog/backend/logs/strapi.log" ]; then
            echo "=== Strapi logs ==="
            tail -10 /home/myblog/backend/logs/strapi.log
        fi
        
        if [ -f "/home/myblog/logs/strapi-monitor.log" ]; then
            echo "=== Monitor logs ==="
            tail -10 /home/myblog/logs/strapi-monitor.log
        fi
        
        echo ""
        echo "üìä CONFIGURATION VITE:"
        echo "---------------------"
        if [ -f "/home/myblog/backend/src/admin/vite.config.ts" ]; then
            cat /home/myblog/backend/src/admin/vite.config.ts
        else
            echo "Fichier vite.config.ts non trouv√©"
        fi
        
    } > "$report_file"
    
    log_success "Rapport g√©n√©r√©: $report_file"
    echo "   üìÑ Consultez le rapport avec: cat $report_file"
}

# Menu principal
show_menu() {
    echo ""
    echo "üîß Diagnostic Strapi/React - Menu"
    echo "================================"
    echo ""
    echo "1Ô∏è‚É£  Diagnostic complet"
    echo "2Ô∏è‚É£  Erreurs React/Context"
    echo "3Ô∏è‚É£  Analyse m√©moire"
    echo "4Ô∏è‚É£  D√©pendances Node.js"
    echo "5Ô∏è‚É£  Configuration Vite"
    echo "6Ô∏è‚É£  Connectivit√© r√©seau"
    echo "7Ô∏è‚É£  G√©n√©rer rapport"
    echo "8Ô∏è‚É£  Quitter"
    echo ""
    read -p "Choisissez une option (1-8): " choice
    
    case $choice in
        1)
            check_react_errors
            check_memory_status
            check_node_dependencies
            check_vite_config
            check_network_connectivity
            ;;
        2) check_react_errors ;;
        3) check_memory_status ;;
        4) check_node_dependencies ;;
        5) check_vite_config ;;
        6) check_network_connectivity ;;
        7) generate_report ;;
        8) exit 0 ;;
        *) log_error "Option invalide" ;;
    esac
}

# Point d'entr√©e principal
case "${1:-menu}" in
    "menu") 
        while true; do
            show_menu
            echo ""
            read -p "Appuyez sur Entr√©e pour continuer..."
        done
        ;;
    "full"|"all") 
        check_react_errors
        check_memory_status
        check_node_dependencies
        check_vite_config
        check_network_connectivity
        generate_report
        ;;
    "react") check_react_errors ;;
    "memory") check_memory_status ;;
    "deps") check_node_dependencies ;;
    "vite") check_vite_config ;;
    "network") check_network_connectivity ;;
    "report") generate_report ;;
    *)
        echo "Usage: $0 {menu|full|react|memory|deps|vite|network|report}"
        echo ""
        echo "Options:"
        echo "  menu     - Menu interactif (d√©faut)"
        echo "  full     - Diagnostic complet"
        echo "  react    - Analyse erreurs React/Context"
        echo "  memory   - Analyse utilisation m√©moire"
        echo "  deps     - V√©rification d√©pendances Node.js"
        echo "  vite     - V√©rification configuration Vite"
        echo "  network  - Test connectivit√© r√©seau"
        echo "  report   - G√©n√©rer rapport d√©taill√©"
        exit 1
        ;;
esac
