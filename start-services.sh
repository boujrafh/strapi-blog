#!/bin/bash

# üöÄ Script pour d√©marrer le backend et frontend
# Lance Strapi puis le frontend Vite

echo "üöÄ D√©marrage des applications blog"
echo "=================================="

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    log_error "Dossiers backend ou frontend non trouv√©s !"
    log_info "Assurez-vous d'√™tre dans le r√©pertoire racine du projet"
    exit 1
fi

# Fonction pour v√©rifier si un port est libre
check_port() {
    local port=$1
    local process_info=$(lsof -i:$port 2>/dev/null)
    
    if [ -n "$process_info" ]; then
        return 1  # Port occup√©
    else
        return 0  # Port libre
    fi
}

# Fonction pour attendre qu'un service soit pr√™t
wait_for_service() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=1
    
    log_info "‚è≥ Attente du d√©marrage de $service_name..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s -f "$url" > /dev/null 2>&1; then
            log_success "$service_name pr√™t !"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    log_warning "$service_name prend plus de temps que pr√©vu..."
    return 1
}

echo ""
log_info "üîç V√©rification des pr√©requis..."

# V√©rifier les ports
echo ""
log_info "üìä V√©rification des ports..."

if ! check_port 1440; then
    log_error "Port 1440 (Strapi) d√©j√† occup√© !"
    log_info "Processus sur le port 1440:"
    lsof -i:1440
    echo ""
    log_info "üí° Utilisez './stop-services.sh' pour lib√©rer les ports"
    exit 1
else
    log_success "Port 1440 (Strapi) libre"
fi

if ! check_port 5173; then
    log_error "Port 5173 (Frontend) d√©j√† occup√© !"
    log_info "Processus sur le port 5173:"
    lsof -i:5173
    echo ""
    log_info "üí° Utilisez './stop-services.sh' pour lib√©rer les ports"
    exit 1
else
    log_success "Port 5173 (Frontend) libre"
fi

# V√©rifier les d√©pendances
echo ""
log_info "üì¶ V√©rification des d√©pendances..."

if [ ! -d "backend/node_modules" ]; then
    log_warning "D√©pendances backend manquantes"
    log_info "Installation des d√©pendances backend..."
    cd backend && npm install
    cd ..
fi

if [ ! -d "frontend/node_modules" ]; then
    log_warning "D√©pendances frontend manquantes"
    log_info "Installation des d√©pendances frontend..."
    cd frontend && npm install
    cd ..
fi

log_success "D√©pendances v√©rifi√©es"

# D√©marrer le backend
echo ""
log_info "üîπ D√©marrage du backend Strapi..."
log_info "   üìç R√©pertoire: ./backend"
log_info "   üåê Port: 1440"
log_info "   üìù Mode: develop"

cd backend

# V√©rifier que les fichiers n√©cessaires existent
if [ ! -f "package.json" ]; then
    log_error "package.json non trouv√© dans le dossier backend !"
    exit 1
fi

# D√©marrer Strapi en arri√®re-plan
npm run develop > ../logs/backend.log 2>&1 &
backend_pid=$!

cd ..

log_success "Backend Strapi lanc√© (PID: $backend_pid)"
log_info "üìù Logs backend: tail -f logs/backend.log"

# Cr√©er le dossier logs s'il n'existe pas
mkdir -p logs

# Attendre que Strapi soit pr√™t
echo ""
wait_for_service "http://localhost:1440" "Strapi"

# D√©marrer le frontend
echo ""
log_info "üîπ D√©marrage du frontend Vite..."
log_info "   üìç R√©pertoire: ./frontend"
log_info "   üåê Port: 5173"
log_info "   üìù Mode: dev"

cd frontend

# V√©rifier que les fichiers n√©cessaires existent
if [ ! -f "package.json" ]; then
    log_error "package.json non trouv√© dans le dossier frontend !"
    kill $backend_pid 2>/dev/null
    exit 1
fi

# D√©marrer Vite en arri√®re-plan
npm run dev > ../logs/frontend.log 2>&1 &
frontend_pid=$!

cd ..

log_success "Frontend Vite lanc√© (PID: $frontend_pid)"
log_info "üìù Logs frontend: tail -f logs/frontend.log"

# Attendre que Vite soit pr√™t
echo ""
wait_for_service "http://localhost:5173" "Frontend"

# R√©sum√© final
echo ""
echo "üéâ ‚úÖ SERVICES D√âMARR√âS AVEC SUCC√àS !"
echo "===================================="
echo ""
echo "üìä Informations des services:"
echo "   üî∏ Backend Strapi:"
echo "     ‚Ä¢ PID: $backend_pid"
echo "     ‚Ä¢ Port: 1440"
echo "     ‚Ä¢ Admin: http://localhost:1440/admin"
echo "     ‚Ä¢ API: http://localhost:1440/api"
echo ""
echo "   üî∏ Frontend Vite:"
echo "     ‚Ä¢ PID: $frontend_pid"
echo "     ‚Ä¢ Port: 5173"
echo "     ‚Ä¢ Interface: http://localhost:5173"
echo ""
echo "üåê URLs de production:"
echo "   üî∏ Frontend: https://blog.votre-domaine.com"
echo "   üî∏ Backend: https://cms.votre-domaine.com/admin"
echo ""
echo "üìù Commandes utiles:"
echo "   üî∏ Arr√™ter les services: ./stop-services.sh"
echo "   üî∏ Voir logs backend: tail -f logs/backend.log"
echo "   üî∏ Voir logs frontend: tail -f logs/frontend.log"
echo "   üî∏ V√©rifier les ports: lsof -i:1440 && lsof -i:5173"
echo ""
echo "üí° Les services tournent en arri√®re-plan."
echo "   Utilisez Ctrl+C ou ./stop-services.sh pour les arr√™ter."

# Sauvegarder les PIDs pour r√©f√©rence
echo "$backend_pid" > logs/backend.pid
echo "$frontend_pid" > logs/frontend.pid

log_success "PIDs sauvegard√©s dans logs/"
